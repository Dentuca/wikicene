/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package wikicene

import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import io.vertx.core.json.jackson.DatabindCodec
import org.apache.lucene.analysis.standard.StandardAnalyzer
import org.apache.lucene.store.MMapDirectory
import wikicene.api.WikiceneVerticle
import wikicene.ingestion.FileImporter
import wikicene.lucene.Indexer
import wikicene.lucene.Searcher
import java.nio.file.Paths

const val luceneStoragePath = "lucene-store"
const val articlesDumpPath = "random-articles.dump"

class App {

    fun deploy() {

        // setup the JSON mapper to work with kotlin classes
        DatabindCodec.mapper().registerKotlinModule()

        // setup lucene (move this out of here when doing multiple dirs/analyzers)
        val luceneDirectory = MMapDirectory(Paths.get(luceneStoragePath))
        val analyzer = StandardAnalyzer()
        val indexer = Indexer(luceneDirectory, analyzer)
        val searcher = Searcher(luceneDirectory, analyzer)

        // index data
        FileImporter(articlesDumpPath, indexer).let {
            timeThis("indexing all articles") {
                it.import()
            }
        }

        // start the API
        WikiceneVerticle(searcher).start()
    }
}

fun main() {
    App().deploy()
}

fun timeThis(description: String, block: () -> Unit) {
    val start = System.currentTimeMillis()
    block()
    println("$description took ${System.currentTimeMillis() - start} ms")
}
